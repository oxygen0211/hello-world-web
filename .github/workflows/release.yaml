name: Create and deplyo a release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: prepare
        run: npm ci
      - name: test
        run: npm run test-ci

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-ci
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1

    - name: docker build and push to ECR
      id: docker-build
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        IMAGE_TAG: ${GITHUB_REF##*/}
      run: |
        docker build -t $ECR_REGISTRY/hello-world-web:$IMAGE_TAG .
        docker push $ECR_REGISTRY/hello-world-web:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/hello-world-web:$IMAGE_TAG"

    - name: Update ECS task definition
      id: update-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: prod-ecs-task.json
        container-name: hello-world-staging
        image: ${{ steps.docker-build.outputs.image }}

    - name: Deploy Amazon ECS task
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.update-task-def.outputs.task-definition }}
        service: hello-world-prod
        cluster: hello-world
        wait-for-service-stability: true
